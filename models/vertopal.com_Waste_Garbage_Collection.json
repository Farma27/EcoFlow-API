{"import os\n    import time\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    import tensorflow as tf\n    from tensorflow import keras\n    from tensorflow.keras import layers\n    from tensorflow.keras.models import Sequential\n    from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau\n\n    import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import os\n    import cv2\n    import sklearn\n    import tensorflow as tf\n    from tensorflow import keras\n    from PIL import Image as im\n    from glob import glob\n    from sklearn.model_selection import train_test_split\n    import keras\n    #from tf.keras.utils import to_categorical\n    from tensorflow.keras.models import Sequential, load_model\n    from tensorflow.keras.models import Model\n    from tensorflow.keras.applications.vgg16 import VGG16\n    from tensorflow.keras.models import Model\n    from tensorflow.keras.applications.resnet50 import ResNet50\n    from tensorflow.keras.applications.vgg16 import preprocess_input\n    from tensorflow.keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout\n    from tensorflow.keras.preprocessing.image import ImageDataGenerator\n    from tensorflow.keras.optimizers import Adam\n    from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n    from PIL import Image as im\n    import cv2\n\n    from keras import backend as K\n    from keras.preprocessing import image\n    from tensorflow import lite\n\n    # Set seeds to make the experiment more reproducible.\n    import random\n    def seed_everything(seed ": null, " to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount": null}